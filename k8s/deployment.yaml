apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: howmuchami-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "20m"
spec:
  tls:
    - hosts:
        - howmuchami.cc
      secretName: howmuchami-tls
  rules:
    - host: howmuchami.cc
      http:
        paths:
          - path: /
            backend:
              serviceName: howmuchami-web-svc
              servicePort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: howmuchami-web-svc
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: howmuchami-web
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: howmuchami-web
spec:
  selector:
    matchLabels:
      app: howmuchami-web
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 50%
  template:
    metadata:
      labels:
        app: howmuchami-web
    spec:
      containers:
        - name: app
          image: astrocket/howmuchami:0.0.1
          imagePullPolicy: Always
          command: ["bin/rails", "s", "-b", "0.0.0.0"]
          env:
            - name: RAILS_ENV
              value: "production"
            - name: RAILS_LOG_TO_STDOUT
              value: "true"
            - name: RAILS_SERVE_STATIC_FILES
              value: "true"
            - name: DEPLOY_VERSION
              value: "1"
            - name: RAILS_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: howmuchami-secrets
                  key: howmuchami-master-key
          volumeMounts:
            - mountPath: /assets
              name: assets
          ports:
            - containerPort: 3000
          resources:
            requests:
              cpu: 100m
              memory: 500Mi
            limits:
              cpu: 100m
              memory: 500Mi
          readinessProbe:
            httpGet:
              path: /health_check
              port: 3000
            periodSeconds: 5
            successThreshold: 2
            failureThreshold: 2
            timeoutSeconds: 5
          lifecycle:
            postStart:
              exec:
                command:
                  - sh
                  - -c
                  - "cp -r /app/public/* /assets"
        - name: nginx
          image: nginx:1.17-alpine
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 50m
              memory: 300Mi
            limits:
              cpu: 50m
              memory: 300Mi
          volumeMounts:
            - mountPath: /assets
              name: assets
              readOnly: true
            - mountPath: /etc/nginx/nginx.conf
              name: nginx-conf
              subPath: nginx.conf
              readOnly: true
          readinessProbe:
            httpGet:
              path: /health_check
              port: 80
            periodSeconds: 5
            successThreshold: 2
            failureThreshold: 2
            timeoutSeconds: 5
      volumes:
        - name: nginx-conf
          configMap:
            name: howmuchami-nginx-conf
            items:
              - key: nginx.conf
                path: nginx.conf
        - name: assets
          emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: howmuchami-nginx-conf
data:
  nginx.conf: |
    user nginx;
    worker_processes  auto;

    error_log /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
      worker_connections  16384;
    }

    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /dev/stdout main;
      # access_log off;

      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;

      gzip  on;
      gzip_static  on;
      gzip_http_version 1.0;
      gzip_comp_level 2;
      gzip_min_length  1000;
      gzip_proxied any;
      gzip_types application/x-javascript text/css text/javascript text/plain text/xml image/x-icon image/png;
      gzip_vary on;
      gzip_disable "MSIE [1-6].(?!.*SV1)";

      keepalive_timeout  45;
      client_max_body_size 20m;

      upstream app {
        server localhost:3000 fail_timeout=0;
      }

      server {
        listen 80;

        root /assets;

        location /nginx_status {
          stub_status on;
          access_log off;
          allow 127.0.0.1;
          deny all;
        }

        location ~ ^/assets/ {
          expires 60d;
          add_header Cache-Control public;
          add_header ETag "";
          break;
        }

        location /app/admin {
          client_max_body_size 100m;
          try_files $uri/index.html $uri/index.htm @app;
        }

        location / {
          try_files $uri/index.html $uri/index.htm @app;
        }

        location @app {
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_http_version 1.1;
          proxy_redirect off;

          proxy_read_timeout 30;
          proxy_send_timeout 30;

          # If you don't find the filename in the static files
          # Then request it from the app server
          if (!-f $request_filename) {
            proxy_pass http://app;
            break;
          }
        }
      }
    }